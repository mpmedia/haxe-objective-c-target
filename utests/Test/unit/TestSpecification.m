//
//  TestSpecification
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../unit/TestSpecification.h"

@implementation C

+ (void) staticFunc{
}
static NSMutableString* staticVar;
+ (NSMutableString*) staticVar {
	if (staticVar == nil) staticVar = ;
	return staticVar;
}
+ (void) setStaticVar:(NSMutableString*)val {
	staticVar = val;
}
static NSMutableString* staticProp;
+ (NSMutableString*) staticProp {
	if (staticProp == nil) staticProp = ;
	return staticProp;
}
+ (void) setStaticProp:(NSMutableString*)val {
	staticProp = val;
}
- (void) func{
}
@synthesize v;
@synthesize prop;
- (id) init{
	self = [super init];
	self.v = [NSMutableString stringWithString:@"var"];
	self.prop = [NSMutableString stringWithString:@"prop"];
	C.staticVar = [NSMutableString stringWithString:@"staticVar"];
	C.staticProp = [NSMutableString stringWithString:@"staticProp"];
	return self;
}

@end

@implementation CChild

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation CDyn

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation EmptyClass

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation ClassWithToString

- (NSMutableString*) toString{
	return [NSMutableString stringWithString:@"ClassWithToString.toString()"];
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation ClassWithToStringChild

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation ClassWithToStringChild2

- (NSMutableString*) toString{
	return [NSMutableString stringWithString:@"ClassWithToStringChild2.toString()"];
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation ClassWithCtorDefaultValues

@synthesize a;
@synthesize b;
- (id) init:(int)a b:(NSMutableString*)b{
	self = [super init];
	// Optional arguments
	if (!b) b = [NSMutableString stringWithString:@"foo"];
	if (!a) a = 1;
	
	self.a = a;
	self.b = b;
	return self;
}

@end

@implementation ClassWithCtorDefaultValuesChild

- (id) init:(int)a b:(NSMutableString*)b{
	self = [super init];
	// Optional arguments
	if (!b) b = nil;
	if (!a) a = nil;
	
	return self;
}

@end

@implementation IntWrap

+ (int) compare:(IntWrap*)a b:(IntWrap*)b{
	return ( (a.i == b.i) ? 0 : ( (a.i > b.i) ? 1 : -1));
}
@synthesize i;
- (id) init:(int)i{
	self = [super init];
	self.i = i;
	return self;
}

@end

@implementation TestSpecification

- (id) init{
	self = [super init];
	return self;
}

@end
