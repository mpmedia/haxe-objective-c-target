//
//  MyAbstract
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../unit/MyAbstract.h"

@implementation MyAbstractImpl

+ (int) _new:(int)x{
	return x;
}
+ (int) incr:(int)this1{
	return ++this1;
}
+ (int) toInt:(int)this1{
	return this1;
}

@end

@implementation TemplateWrapImpl

+ (Template*) _new:(NSMutableString*)x{
	return [[Template alloc] init:x];
}
+ (Template*) get:(Template*)this1{
	return this1;
}
+ (TemplateWrap*) fromString:(NSMutableString*)s{
	return (TemplateWrap*)[[Template alloc] init:s];
}
+ (NSMutableString*) toString:(Template*)this1{
	return [this1.execute:[NSMutableDictionary dictionaryWithObjectsAndKeys:
	[[NSMutableString stringWithString:@"really works!"] copy], @"t",
	nil] macros:nil];
}

@end

@implementation MeterImpl

+ (float) _new:(float)f{
	return f;
}
+ (float) get:(float)this1{
	return this1;
}
+ (NSMutableString*) toString:(float)this1{
	return [this1 stringByAppendingString:[NSMutableString stringWithString:@"m"]];
}

@end

@implementation KilometerImpl

+ (float) _new:(float)f{
	return f;
}
+ (NSMutableString*) toString:(float)this1{
	return [this1 stringByAppendingString:[NSMutableString stringWithString:@"km"]];
}
+ (Kilometer*) fromMeter:(Meter*)m{
	return (Kilometer*)(float)m / 1000.;
}

@end

@implementation MyHashImpl

+ (StringMap*) _new{
	return [[StringMap alloc] init];
}
+ (void) set:(StringMap*)this1 k:(NSMutableString*)k v:(id)v{
	[this1.set:k value:v];
}
+ (id) get:(StringMap*)this1 k:(NSMutableString*)k{
	return [this1.get:k];
}
+ (NSMutableString*) toString:(StringMap*)this1{
	return [this1.toString];
}
+ (MyHash*) fromStringArray:(NSMutableArray*)arr{
	
	MyHash *hash = (MyHash*)[[StringMap alloc] init];
	int i = 0;
	while (i < arr.length) {
		
		NSMutableString *k = [arr hx_objectAtIndex:i++];
		
		NSMutableString *v = [arr hx_objectAtIndex:i++];
		[hash.set:k value:v];
	}
	return hash;
}
+ (MyHash*) fromArray:(NSMutableArray*)arr{
	
	MyHash *hash = (MyHash*)[[StringMap alloc] init];
	int i = 0;
	while (i < arr.length) {
		id k = [arr hx_objectAtIndex:i++];
		id v = [arr hx_objectAtIndex:i++];
		[hash.set:[Std string:[[NSMutableString stringWithString:@"_s"] stringByAppendingString:[Std string:k]]] value:v];
	}
	return hash;
}

@end

@implementation AbstractBase

@synthesize value;
- (id) init:(id)value{
	self = [super init];
	self.value = value;
	return self;
}

@end

@implementation AbstractZImpl

+ (int) toFoo:(AbstractBase*)a{
	return a.value;
}
+ (NSMutableString*) toString:(AbstractBase*)a{
	return a.value;
}

@end

@implementation MyPoint3

@synthesize x;
@synthesize y;
@synthesize z;
- (id) init:(float)x y:(float)y z:(float)z{
	self = [super init];
	self.x = x;
	self.y = y;
	self.z = z;
	return self;
}

@end

@implementation MyVectorImpl

+ (MyVector*) add:(MyVector*)lhs rhs:(MyVector*)rhs{
	return [[MyPoint3 alloc] init:lhs x + rhs x y:lhs y + rhs y z:lhs z + rhs z];
}
+ (MyVector*) scalarAssign:(MyVector*)lhs rhs:(float)rhs{
	lhs.x *= rhs;
	lhs.y *= rhs;
	lhs.z *= rhs;
	return lhs;
}
+ (MyVector*) scalar:(MyVector*)lhs rhs:(float)rhs{
	return [[MyPoint3 alloc] init:lhs x * rhs y:lhs y * rhs z:lhs z * rhs];
}
+ (MyVector*) invert:(MyVector*)t{
	return [[MyPoint3 alloc] init:-t x y:-t y z:-t z];
}
+ (MyPoint3*) get:(MyPoint3*)this1{
	return this1;
}
+ (NSMutableString*) toString:(MyPoint3*)this1{
	return [[[[[[[NSMutableString stringWithString:@"("] stringByAppendingString:this1.x] stringByAppendingString:[NSMutableString stringWithString:@","]] stringByAppendingString:this1.y] stringByAppendingString:[NSMutableString stringWithString:@","]] stringByAppendingString:this1.z] stringByAppendingString:[NSMutableString stringWithString:@")"]];
}

@end

@implementation MyIntImpl


+ (NSMutableString*) repeat:(MyInt*)lhs rhs:(NSMutableString*)rhs{
	
	StringBuf *s = [[StringBuf alloc] init];
	{
		int _g = 0;
		while (_g < (int)lhs) {
			int i = _g++;
			s.b += [Std string:rhs];
		}
	}
	return s.b;
}

@end

@implementation MyInt2Impl

+ (int) _new:(int)v{
	return v;
}
+ (int) get:(int)this1{
	return this1;
}
+ (MyInt2*) invert:(int)this1{
	return (MyInt2*)-this1;
}
+ (void) incr:(int)this1{
	++this1;
}

@end

@implementation MyStringImpl






@end

@implementation ClassWithHashCode

@synthesize i;
- (int) hashCode{
	return self.i;
}
- (id) init:(int)i{
	self = [super init];
	self.i = i;
	return self;
}

@end

@implementation ClassWithoutHashCode

@synthesize i;
- (id) init:(int)i{
	self = [super init];
	self.i = i;
	return self;
}

@end

@implementation MyReflectImpl

+ (id) arrayAccess:(id)this1 key:(NSMutableString*)key{
	return [Reflect field:this1 field:key];
}
+ (id) arrayWrite:(id)this1 key:(NSMutableString*)key value:(id)value{
	if (this1 != nil) [this1 __SetField-TDynamic-];
	return value;
}

@end

@implementation MyAbstractClosureImpl

+ (NSMutableString*) _new:(NSMutableString*)value{
	return value;
}
+ (SEL) test:(NSMutableString*)this1{
	
	NSMutableArray *this2 = [[NSMutableArray alloc] initWithObject:this1];
	SEL fn = ^+ (NSMutableString*) {
		return [this2 hx_objectAtIndex:0];
	}
	return fn;
}
+ (void) setVal:(NSMutableString*)this1 v:(NSMutableString*)v{
	this1 = v;
}

@end

@implementation MyAbstractSetterImpl


+ (id) _new{
	return [NSMutableDictionary dictionaryWithObjectsAndKeys:
	nil];
}
+ (NSMutableString*) get_value:(id)this1{
	return [this1 value];
}
+ (NSMutableString*) set_value:(id)this1 s:(NSMutableString*)s{
	[this1 value] = s;
	return s;
}

@end
