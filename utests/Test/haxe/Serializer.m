//
//  Serializer
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../haxe/Serializer.h"

@implementation Serializer

static BOOL USE_CACHE;
+ (BOOL) USE_CACHE {
	if (USE_CACHE == nil) USE_CACHE = NO;
	return USE_CACHE;
}
+ (void) setUSE_CACHE:(BOOL)val {
	USE_CACHE = val;
}
static BOOL USE_ENUM_INDEX;
+ (BOOL) USE_ENUM_INDEX {
	if (USE_ENUM_INDEX == nil) USE_ENUM_INDEX = NO;
	return USE_ENUM_INDEX;
}
+ (void) setUSE_ENUM_INDEX:(BOOL)val {
	USE_ENUM_INDEX = val;
}
static NSMutableString* BASE64;
+ (NSMutableString*) BASE64 {
	if (BASE64 == nil) BASE64 = [NSMutableString stringWithString:@"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"];
	return BASE64;
}
+ (void) setBASE64:(NSMutableString*)val {
	BASE64 = val;
}
+ (NSMutableString*) run:(id)v{
	
	Serializer *s = [[Serializer alloc] init];
	[s.serialize:v];
	return [s.toString];
}
@synthesize buf;
@synthesize cache;
@synthesize shash;
@synthesize scount;
@synthesize useCache;
@synthesize useEnumIndex;
- (NSMutableString*) toString{
	return self.buf.b;
}
- (void) serializeString:(NSMutableString*)s{
	int x = [self.shash get:s];
	if (x != nil) {
		[self.buf.b appendString:[NSMutableString stringWithString:@"R"]];
		self.buf.b += [Std string:x];
		return;
	}
	[self.shash set:s value:self.scount++];
	[self.buf.b appendString:[NSMutableString stringWithString:@"y"]];
	s = [StringTools urlEncode:s];
	self.buf.b += [Std string:s.length];
	[self.buf.b appendString:[NSMutableString stringWithString:@":"]];
	self.buf.b += [Std string:s];
}
- (BOOL) serializeRef:(id)v{
	{
		int _g1 = 0; int _g = self.cache.length;
		while (_g1 < _g) {
			int i = _g1++;
			if ([self.cache hx_objectAtIndex:i] == v) {
				[self.buf.b appendString:[NSMutableString stringWithString:@"r"]];
				self.buf.b += [Std string:i];
				return YES;
			}
		}
	}
	[self.cache push:v];
	return NO;
}
- (void) serializeFields:(id)v{
	{
		int _g = 0; 
		NSMutableArray *_g1 = [Reflect fields:v];
		while (_g < _g1.length) {
			
			NSMutableString *f = [_g1 hx_objectAtIndex:_g];
			++_g;
			[self serializeString:f];
			[self serialize:[Reflect field:v field:f]];
		}
	}
	[self.buf.b appendString:[NSMutableString stringWithString:@"g"]];
}
- (void) serialize:(id)v{
	
	Type *_g = [Type _typeof:v];
	
	var $e : enum =  (_g)
	switch ( $e.index ) {
		
		case 0:
		{
			[self.buf.b appendString:[NSMutableString stringWithString:@"n"]]}break
		case 1:
		{
			{
				if (v == 0) {
					[self.buf.b appendString:[NSMutableString stringWithString:@"z"]];
					return;
				}
				[self.buf.b appendString:[NSMutableString stringWithString:@"i"]];
				self.buf.b += [Std string:v];
			}}break
		case 2:
		{
			if (isnan(v)) [self.buf.b appendString:[NSMutableString stringWithString:@"k"]];
			else if (!isfinite(v)) self.buf.b += [Std string:( (v < 0) ? [NSMutableString stringWithString:@"m"] : [NSMutableString stringWithString:@"p"])];
			else {
				[self.buf.b appendString:[NSMutableString stringWithString:@"d"]];
				self.buf.b += [Std string:v];
			}}break
		case 3:
		{
			self.buf.b += [Std string:( (v) ? [NSMutableString stringWithString:@"t"] : [NSMutableString stringWithString:@"f"])]}break
		case 6:
		
		var MATCH _g_eTClass_0 : Class = $e.params[0]{
			{
				if (_g_eTClass_0 == NSMutableString) {
					[self serializeString:v];
					return;
				}
				if (self.useCache && [self serializeRef:v]) return;
				switch (_g_eTClass_0){
					case NSMutableArray:{
						{
							int ucount = 0;
							[self.buf.b appendString:[NSMutableString stringWithString:@"a"]];
							int l = [v hx_objectAtIndex:[NSMutableString stringWithString:@"length"]];
							{
								int _g1 = 0;
								while (_g1 < (int)l) {
									int i = _g1++;
									if ([v hx_objectAtIndex:i] == nil) ucount++;
									else {
										if (ucount > 0) {
											if (ucount == 1) [self.buf.b appendString:[NSMutableString stringWithString:@"n"]];
											else {
												[self.buf.b appendString:[NSMutableString stringWithString:@"u"]];
												self.buf.b += [Std string:ucount];
											}
											ucount = 0;
										}
										[self serialize:[v hx_objectAtIndex:i]];
									}
								}
							}
							if (ucount > 0) {
								if (ucount == 1) [self.buf.b appendString:[NSMutableString stringWithString:@"n"]];
								else {
									[self.buf.b appendString:[NSMutableString stringWithString:@"u"]];
									self.buf.b += [Std string:ucount];
								}
							}
							[self.buf.b appendString:[NSMutableString stringWithString:@"h"]];
						}}break;
					case List:{
						{
							[self.buf.b appendString:[NSMutableString stringWithString:@"l"]];
							
							List *v1 = v;
							{
								id _it2 = [v1 iterator];
								while ( [_it2 hasNext] ) do {
									id i = [_it2 next];
									[self serialize:i];
								}
							}
							[self.buf.b appendString:[NSMutableString stringWithString:@"h"]];
						}}break;
					case NSDate:{
						{
							
							NSDate *d = v;
							[self.buf.b appendString:[NSMutableString stringWithString:@"v"]];
							self.buf.b += [Std string:[d toString]];
						}}break;
					case StringMap:{
						{
							[self.buf.b appendString:[NSMutableString stringWithString:@"b"]];
							
							StringMap *v1 = v;
							{
								id _it3 = [v1 keys];
								while ( [_it3 hasNext] ) do {
									NSMutableString k = [_it3 next];
									{
										[self serializeString:k];
										[self serialize:[v1 get:k]];
									};
								}
							}
							[self.buf.b appendString:[NSMutableString stringWithString:@"h"]];
						}}break;
					case IntMap:{
						{
							[self.buf.b appendString:[NSMutableString stringWithString:@"q"]];
							
							IntMap *v1 = v;
							{
								id _it4 = [v1 keys];
								while ( [_it4 hasNext] ) do {
									int k = [_it4 next];
									{
										[self.buf.b appendString:[NSMutableString stringWithString:@":"]];
										self.buf.b += [Std string:k];
										[self serialize:[v1 get:k]];
									};
								}
							}
							[self.buf.b appendString:[NSMutableString stringWithString:@"h"]];
						}}break;
					case ObjectMap:{
						{
							[self.buf.b appendString:[NSMutableString stringWithString:@"M"]];
							
							ObjectMap *v1 = v;
							{
								id _it5 = [v1 keys];
								while ( [_it5 hasNext] ) do {
									id k = [_it5 next];
									{
										[self serialize:k];
										[self serialize:[v1 get:k]];
									};
								}
							}
							[self.buf.b appendString:[NSMutableString stringWithString:@"h"]];
						}}break;
					case Bytes:{
						{
							
							Bytes *v1 = v;
							int i = 0;
							int max = v1.length - 2;
							
							StringBuf *charsBuf = [[StringBuf alloc] init];
							
							NSMutableString *b64 = -TMono-;
							while (i < max) {
								int b1 = [v1.b hx_objectAtIndex:i++];
								int b2 = [v1.b hx_objectAtIndex:i++];
								int b3 = [v1.b hx_objectAtIndex:i++];
								charsBuf.b += [Std string:[b64 charAt:b1 >> 2]];
								charsBuf.b += [Std string:[b64 charAt: (b1 << 4 | b2 >> 4) & 63]];
								charsBuf.b += [Std string:[b64 charAt: (b2 << 2 | b3 >> 6) & 63]];
								charsBuf.b += [Std string:[b64 charAt:b3 & 63]];
							}
							if (i == max) {
								int b1 = [v1.b hx_objectAtIndex:i++];
								int b2 = [v1.b hx_objectAtIndex:i++];
								charsBuf.b += [Std string:[b64 charAt:b1 >> 2]];
								charsBuf.b += [Std string:[b64 charAt: (b1 << 4 | b2 >> 4) & 63]];
								charsBuf.b += [Std string:[b64 charAt:b2 << 2 & 63]];
							}
							else if (i == max + 1) {
								int b1 = [v1.b hx_objectAtIndex:i++];
								charsBuf.b += [Std string:[b64 charAt:b1 >> 2]];
								charsBuf.b += [Std string:[b64 charAt:b1 << 4 & 63]];
							}
							
							NSMutableString *chars = charsBuf.b;
							[self.buf.b appendString:[NSMutableString stringWithString:@"s"]];
							self.buf.b += [Std string:chars.length];
							[self.buf.b appendString:[NSMutableString stringWithString:@":"]];
							self.buf.b += [Std string:chars];
						}}break;
					default:{
						{
							[self.cache pop];
							if ([v hxSerialize] != nil) {
								[self.buf.b appendString:[NSMutableString stringWithString:@"C"]];
								[self serializeString:[Type getClassName:_g_eTClass_0]];
								[self.cache push:v];
								[v hxSerialize-TDynamic-];
								[self.buf.b appendString:[NSMutableString stringWithString:@"g"]];
							}
							else {
								[self.buf.b appendString:[NSMutableString stringWithString:@"c"]];
								[self serializeString:[Type getClassName:_g_eTClass_0]];
								[self.cache push:v];
								[self serializeFields:v];
							}
						}}break;
				}
			}}break
		case 4:
		{
			{
				if (self.useCache && [self serializeRef:v]) return;
				[self.buf.b appendString:[NSMutableString stringWithString:@"o"]];
				[self serializeFields:v];
			}}break
		case 7:
		
		var MATCH _g_eTEnum_0 : Enum = $e.params[0]{
			{
				if (self.useCache && [self serializeRef:v]) return;
				[self.cache pop];
				self.buf.b += [Std string:( (self.useEnumIndex) ? [NSMutableString stringWithString:@"j"] : [NSMutableString stringWithString:@"w"])];
				[self serializeString:[Type getEnumName:_g_eTEnum_0]];
				if (self.useEnumIndex) {
					[self.buf.b appendString:[NSMutableString stringWithString:@":"]];
					self.buf.b += [Std string:[v hx_objectAtIndex:1]];
				}
				else [self serializeString:[v hx_objectAtIndex:0]];
				[self.buf.b appendString:[NSMutableString stringWithString:@":"]];
				int l = [v hx_objectAtIndex:[NSMutableString stringWithString:@"length"]];
				self.buf.b += [Std string:l - 2];
				{
					int _g1 = 2;
					while (_g1 < (int)l) {
						int i = _g1++;
						[self serialize:[v hx_objectAtIndex:i]];
					}
				}
				[self.cache push:v];
			}}break
		case 5:
		{
			@throw [NSMutableString stringWithString:@"Cannot serialize function"];}break
		default:{
			@throw [[NSMutableString stringWithString:@"Cannot serialize "] stringByAppendingString:[Std string:v]];}break
	}
}
- (id) init{
	self = [super init];
	self.buf = [[StringBuf alloc] init];
	self.cache = [[NSMutableArray alloc] init];
	self.useCache = -TMono-;
	self.useEnumIndex = -TMono-;
	self.shash = [[StringMap alloc] init];
	self.scount = 0;
	return self;
}

@end
